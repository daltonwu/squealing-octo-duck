netpbm
  * Raster
  * Lossless
  * Uncompressed

Format:

# header
P3
XRES YRES
MAX_COLOR_VALUE
R G B R G B R G B

All whitespace is equivalent

2016-02-05 Fr
Bresenham's Line Algorithm

Draw line from (x0, y0) -> (x1, y1)

			Octant I:

// original:
x = x0, y = y0
while(x <= x1)
	plot(x, y)
	d = f(x+1, y+1/2)
	if(d > 0)
		y += 1
	x += 1

// optimized a bit:
x = x0, y = y0
d = A + B/2
while(x <= x1)
	plot(x, y)
	if(d > 0)
		y += 1
		d += B
	x += 1
	d += A

// optimized some more:
x = x0, y = y0
d = 2A + B
while(x <= x1)
	plot(x, y)
	if(d > 0)
		y += 1
		d += 2B
	x += 1
	d += 2A

			Octant II:

x = x0, y = y0
A = y1 - y0, B = -(x1 - x0)
d = A + 2B
while(y <= y1)
	plot(x, y)
	if(d < 0)
		x += 1
		d += 2A
	y += 1
	A += 2B



16-02-22 Mo
Using Matrices
Point Matrix



16-02-23 Tu
Matrix Math Review
	Scalar multiplication
		
	Matrix multiplication
		|a b c| |1 4|   |(a + 2b + 3c) (4a + 5b + 6c)|
		|d e f| |2 5| = |(d + 2e + 3f) (4d + 5e + 6f)|
		|g h i| |3 6|   |(g + 2h + 3i) (4g + 5h + 6i)|

	Multiplicative Identity	Matrix
		* Square matrix
		* Diagonal values are 1; rest are 0



16-02-24 We
Transformation Matrices

Scaling
	(x, y, z) -----------> (ax, by, cz)
	           S(a, b, c)
	
	|a 0 0 0| |x|   |ax|
	|0 b 0 0| |y|   |by|
	|0 0 c 0| |z| = |cz|
	|0 0 0 1| |1|   |1 |

Translating
	(x, y, z) -----------> (x+a, y+b, c+z)
	           T(a, b, c)
	
	|1 0 0 a| |x|   |x+a|
	|0 1 0 b| |y|   |y+b|
	|0 0 1 c| |z| = |z+c|
	|0 0 0 1| |1|   |1  |

Rotating
	(x, y, z) -------> (xcosθ-ysinθ, xsinθ+ycosθ, z)
	           R_z, θ
	
	x_r = rcos(ϕ + θ) = xcosθ - ysinθ
	y_r = rsin(ϕ + θ) = ycosθ + xsinθ
	
	|cosθ -sinθ 0 0|
	|sinθ  cosθ 0 0|
	|0     0    1 0|
	|0     0    0 1|
	
	(x, y, z) -------> (x, ycosθ-zsinθ, ysinθ+zcosθ)
	           R_x, θ
	
	|1  0     0    0|
	|0  cosθ -sinθ 0|
	|0  sinθ  cosθ 0|
	|0  0     0    1|
	
	(x, y, z) -------> (xcosθ-zsinθ, y, xsinθ+zcosθ)
	           R_y, θ
	
	|cosθ 0 -sinθ 0|
	|0    1  0    0|
	|sinθ 0  cosθ 0|
	|0    0  0    1|



16-02-25 Th
Applying Transformations

E_0    edge matrix    (4 × n)
T      translate      (4 × 4)
S      scale          (4 × 4)
R      rotate         (4 × 4)

T × E_0 = E_1
S × E_1 = E_2
R × E_2 = E_3

E_3 = (R × S × T) × E_1



16-03-07 Mo
Parametric Equations

x = f(t)
y = g(t)
t: 0 -> 1

drawing sin curve—number of lines matters (like poly count)
piecewise functions

Hermite curve inputs:
	* Endpoints P0, P1
	* Rates of change at each endpoint, R0, R1

f(t) = at^3 + bt^2 + ct + d
f'(t) = 3at^2 + 2bt + c

t: 0 -> 1

|0 0 0 1| |a|   |d            |   |P0|
|1 1 1 1| |b|   |a + b + c + d|   |P1|
|0 0 1 0| |c| = |c            | = |R0|
|3 2 1 0| |d|   |3a + 2b + c  |   |R1|
    H        G           C

| 2 -2  1  1|
|-3  3 -2 -1|
| 0  0  1  0|
| 1  0  0  0|
  H inverse



16-03-09
Bezier Curve

Inputs
	P0, P3 (endpoints)
	P1, P2 (influence points)

Linear Bezier curve
	P0, P1 (endpoints)
	
	P(t) = (1-t)P0 + tP1

Quadratic
	P0, P2 (endpoints)
	P1 (influence point)
	
	R(t) = (1-t)R0 + tR1
	
	R0(t) = (1-t)P0 + tP1
	R1(t) = (1-t)P0 + tP2
	
	R(t) = (1-t)**2 * P0 + 2t*(1-t) * P1 + t**2 * P2

Cubic
	P0, P1, P2, P3 -> at^3 + bt^2 + ct + d
	
	R(t) = (1-t) * Q0 + t * Q1
	     = (1-t)**3 * P0 + 3*t*(1-t)**2 * P1 + 3*t**2*(1-t) * P2 + t**3 * P3
	     = (-P0 + 3P1 - 3P2 + P3)t^3 + (3P0 - 6P1 + 3P2)t^2 + (-3P0 + 3P1)t + P0
	
	|-1  3 -3 1| |P0|   |a|   | -P0 + 3P1 - 3P2 + P3|
	| 3 -6  3 0| |P1|   |b|   | 3P0 - 6P1 + 3P2     |
	|-3  3  0 0| |P2| = |c| = |-3P0 + 3P1           |
	| 1  0  0 0| |P3|   |d|   |  P0                 |
	
	at^3 + bt^2 + ct + d
	2 exponentiation, 3 multiplication, 3 addition
	
	t(t(at + b) + c) + d
	3 multiplication, 3 addition



16-03-14
psuedocode:

x0 = shape-x(0)
y0 = shape-y(0)

for t: .1 -> 1
	x = shape_x(t)
	y = shape-y(t)
	
	add_edge(x0, y0, x, y, edges)
	
	x0 = x
	y0 = y



16-03-21
3D Shapes

Box, sphere, torus, Bezier/Hermite surfaces*

Box
Inputs: width, height, depth
        (x, y, z)
        upper-left-front

Sphere

θ: angle of circle creation
ϕ: angle of circle rotation

if θ: 0 -> 2pi
	ϕ: 0 -> pi

if θ: 0 -> pi
	ϕ: 0 -> 2pi


|1 0     0     0||rcosθ|   |rcosθ    |
|0 cosϕ -sinϕ  0||rsinθ|   |rsinθcosϕ|
|0 sinϕ  cosϕ  0||0    | = |rsinθsinϕ|
|0 0     0     1||1    |   |1        |

for p: 0 -> 1
	for t: 0 -> 1
		x = rcos(pi*t)
		y = rsin(pi*t)cos(2pi*p)
		z = rsin(pi*t)sin(2pi*p)

Torus

|1 0     0    0||rcosθ    |   |rcosθ          |
|0 cosϕ -sinϕ 0||rsinθ + R|   |cosϕ(rsinθ + R)|
|0 sinϕ  cosϕ 0||0        | = |sinϕ(rsinθ + R)|
|0 0     0    1||1        |   |1              |



Polygon Meshes

Bob Dylan — "Just Like Tom Thumb's Blues"

box: 12 triangles, 2 per face
counterclockwise

   p4 --- p5
  /|     /|
 / |    / |
p0 --- p1 p6
|      | /
|      |/
p3 --- p2

// front
p0, p3, p2
p0, p2, p1

// back
p5, p7, p4
p5, p6, p7

sphere

i, i + n + 1, i + n
i, i + 1, i + n + 1



16-04-05
Backface Culling
* Not render any backwards-facing surfaces
* The surface normal N is a vector orthogonal to a plane
* We compare N to the view vector / camera (?)  V

Algorithm
1. Calculate N
	* Cross product of two vectors that share an endpoint and go in different
	  directions
	* A = <x1 - x0, y1 - y0, z1 - z0>
	* B = <x2 - x0, y2 - y0, z2 - z0>
	* A × B = <AyBz - AzBy, AzBx - AxBz, AxBy - AyBx>
2. Find the angle between N and V
	* V = <0, 0, -1>
3. If the angle is between 90° and 270° (negative cosine), draw the surface



16-04-12
Relative Coordinate System
--------------------------
* Currently, all objects are drawn with respect to the same origin / coordinate
  system (global coordinate system)
* In a relative coordinate system, each object can have its own origin /
  coordinate system
* Use a stack to store the coordinate systems

Drawing Framework
-----------------
A. Transformations are applied to the current top of the stack
B. The stack is pushed and popped as needed
C. Drawing Pipeline:
	1. Generate the points/polygons and add them to a matrix
	2. Multiply the points by the current stack top
	3. Draw the points to the screen
	4. Clear the point matrix



16-04-13

--------------------------------------------
|  Command           |   Stack   |  Image  |
|------------------------------------------|
|  push              |     I     |         |
|                    |     I     |         |
|                    |           |         |
|------------------------------------------|
|  translate         |   T0 I    |         |
|  x, y, z           |     I     |         |
|                    |           |         |
|------------------------------------------|
|  box               |   T0 I    |         |
|  x, y, z, w, h, d  |     I     |         |
|                    |           |         |
|------------------------------------------|
|  push              |   T0 I    |         |
|                    |   T0 I    |         |
|                    |     I     |         |
|------------------------------------------|
|  translate         |  T1 T0 I  |         |
|  x, y, z           |   T0 I    |         |
|                    |     I     |         |
|------------------------------------------|
|  sphere            |  T1 T0 I  |         |
|  x, y, z, r        |   T0 I    |         |
|                    |     I     |         |
|------------------------------------------|
|  pop               |   T0 I    |         |
|                    |           |         |
|                    |     I     |         |
|------------------------------------------|
|  push              |   T0 I    |         |
|                    |   T0 I    |         |
|                    |     I     |         |
|------------------------------------------|
|  translate         |  T2 T0 I  |         |
|  x, y, z           |   T0 I    |         |
|                    |     I     |         |
--------------------------------------------



16-04-19

Compilers
---------

Source code -> compiler -> machine code

1. Lexer
	* Performs lexical analysis
	* Knows the valid symbols of the language
	* Generates a list of the tokens in the source code
	* Example:
		* Source code:
			int main() {
				long x = 5 + 6;
				printf("hi");
				return x;
			}
		* Output:
			int
			IDENT main
			(
			)
			{
			long
			IDENT x
			=
			5
			+
			6
		etc.
2. Parser
	* Performs syntax analysis
	* Knows the grammar of the language
	* Generates a syntax tree
3. Semantic analyzer
	* Knows how to map tokens to operations or variables
	* Knows how to properly navigate the syntax tree
	* Generates:
		1. Symbol table
		2. List of operations in the order to be performed
4. Optimizer (optional)
5. Code generator
	* Knows what the operations mean in assembly/machine code
	* Generates the machine code program file

(does not include preprocessor steps)

lex (flex)

yacc (bison)

BUFFALO



2016-05-03
Animation

move 400 0 0 factor

vary factor 0 4                 0 1
            start & end frames  start & end values

New MDL Commands
----------------
frames <N>
	* Sets total # of frames
	* Should only be done once

basename <S>
	* Sets the fixed part of the filename of each frame

vary <KNOB> <F0> <F1> <V0> <V1>
	* Describes how the knob changes over time
	* Linear scaling of values



2016-05-12
get notes!
Scanline Conversion
* Filling in a polygon with horizontal/vertical line segments
* Need to identify the top, bottom, and middle for each polygon
* (x0, y0) will always be on line BT
* (x1, y1) will always be on line BM or MT
* The first line segment is BB (xB, yB)
* The second line segment is 



2016-05-18
==========

Z-Buffering
-----------
* Keep track of the z-coordinates for each pixel in a z-buffer
* Before plotting a pixel, check its z-value against the z-buffer
* Initialize z-buffer with the smallest possible value
* Calculate z-values for each pixel

plot(x, y, screen, color) -> plot(x, y, z, screen, zb, color)

draw_line()
draw_polygons
scanline

delta z / length of line



2016-05-23
==========

Modelling Real Lighting
----------------------
* Colors are calculated by looking at:
	1. The reflective properties of each object.
	2. The properties of the light hitting the object.
* Kinds of light sources:
	* Ambient light:
		* Background lighting
		* Comes from all directions
		* Hits all objects equally
	* Point light:
		* Comes from a specific point
		* Reflection is based on an object's location relative to the source

Lighting Equation
-----------------
* We want to generate a color value for each polygon (or pixel).
* For a grayscale image, we only need to calculate the color once per polygon.
* For a color image, we must calculate separate color values for red, green, and
  blue for each polygon.
* I (illumination):
	* I = I_ambient + I_diffuse + I_specular (different kinds of light sources
	  and reflection)
	* I_ambient = C_a * K_a
    	* C_a = ambient light color value
		* K_a = constant of ambient light reflection
		* Combination of the color of ambient light and the amount and colors
		  reflected by the object
		* Comes from all directions
		* Hits all surfaces equally
	* I_diffuse (diffuse reflection) = C_p * K_d * cos(θ)
		* C_p = color of point source
		* K_d = constant of diffuse reflection
		* cos(θ) = L ∙ N (both unit vectors)
		* From a point light source
		* Reflected in all directions equally
	* I_specular = C_p * K_s * cos(α)
		* C_p = color of point source
		* K_s = constant of specular reflection
		* cos(α) ** n = (R ∙ V) ** n = ([2 * N * (L ∙ N) - L] ∙ V) ** n (all
		  unit vectors)
		* From a point light source
		* Reflected back in a specific direction
		* Note:
			* L = incident light vector
			* V = view vector
			* R = reflected light vector
			* P = N * cos(θ) = projection of L onto N (all are unit vectors)
			* S = P - L = projection of P onto L (all are unit vectors)

Reflective Properties
---------------------
* Represented as the floating point % of light of each color reflected back.
* Generally (practically), between 0% and 100%

Quality of Light
----------------
* Ambient:
	* Represented as a color value in [0, 255]
* Point light:
	* Represented as a color value (0–255) and point (x, y, z)

Shading Model
-------------
* How do we calculate I?
	1. For a flat surface:
		* Calculate I once per polygon.
	2. Using Gouraud shading:
		* For each polygon, calculate the vertex normals (combination of surface
		  normals of all polygons that share a vertex).
        * Interpolate I during scanline conversion and during drawline.
    3. Using Phong Shading:
        * Calculate vertex normals.
        * Interpolate the normal in scanline conversion and drawline.
        * Recalculate I for each pixel.

