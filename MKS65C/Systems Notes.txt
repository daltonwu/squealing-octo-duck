2015-09-10 Thurs
Aim: Time to C what we can do.

Do Now: What command line programs would do the following?
	(always assume you are starting at your home directory)
	
	1) Move foo.java from Desktop/ to Documents/
	2) Remove all .class files
	3) Connect to lisa.stuy.edu from someplace else
	4) Figure out what gcc does
	5) Copy woohoo.c from your home directory to a /code/ directory on homer (assume you are not working on homer itself)



2015-09-11 Fri
Aim: C what I did there?

Do now:

	From yesterday:
		4) Figure out what gcc does
		5) Copy woohoo.c from your home directory to a /code/ directory on homer (assume you are not working on homer itself)
		
	Today:
		List the Java primitive variable types
		* byte
		* short
		* int
		* long
		* float
		* double
		* boolean
		* char
		
	Last Class Today!
	
		Every day, 1 student will be chosen at random to provide a recap of the previous day's class.
		
		That evening, the same person will be responsible for posting the notes to the class Piazza page. Make sure to tag the note as "last class today".
		
			Title the note LCT <MM/DD WEEKDAY>
			For example: LCT 09/10 Thursday
			
			Also include at the end of the note a link to an interesting piece of tech/science news.



2015-09-16 Wed
Aim: Variables are the spice of life.

Do Now: What is the smallest variable type that could be used to store the following values (using standard sizes)?

	1) 5				byte
	2) -30,000			short
	3) 255				short
	4) 5,000,000,000	float
	
C Primitive Variable Types
	
	All C primitives are numeric.
	
	The only difference is floating point vs. integer and size of variable.
	
	Size can be platform dependent.
		sizeof(<TYPE>) can be used to find the size in bytes.
		
		sizeof(int)
		
	Types	Standard Size (bytes)
	int			4
	short		2
	long		8
	float		4
	double		8
	char		1
	
	All boolean values are numbers:
		0  == false
		!0 == true
		
		YOU WILL ALL MAKE THIS MISTAKE:
			if(x = 6) {…}



2015-09-17 Thurs
Aim: Always read the fine print.

Do Now: Open up your editor of choice (Emacs), write a basic "Hello, world!" program in Java.

Data Types and Variables
	
	Character literals are single characters inside ''.
		e.g., 'a', '*'
	
	String literals exist, even though there is no string data type.
		e.g., "hello", "you smell"
	
	Any variable type can be decalred an "unsigned" variable. This signifies the variable will never be negative.
		The lower bound of any unsigned variable is 0.
		The upper bound will be greater than the signed version.
		
		e.g.	unsigned char x;
				0 <= x <= 255



2015-09-18 Fri
SotD: "Superstitious" — Stevie Wonder
Aim: A vast array of possibilities.

Do Now: How do you declare/use arrays in Java?

Mentioned:
$ echo $PATH
$ which emacs

plus C funsies



2015-09-22 Tues
SotD: "Hunger Strike" — Temple of the Dog
Aim: What's the point of it all?

Memory management
	
	Memory allocation happens either at compile time or at run time (dynamic).
	
	Compiler Allocated Memory (Stack)
		Packaged with the binary of the program
		
		There is no standard default value
		
		Variables and arrays qare allocated here
			e.g., float a		int b[5]
		
		Arrays
			Are not dynamic
			
			Must have a fixed size
			
			There is no length function
			
			There is no boundary checking
	
	Heap Allocated Memory (Java keyword new)
	

2015-09-25 Fri
SotD: "Here Comes the Hotstepper" — Ini Kamoze
Aim: Ok, now we're really going to get to the point.

int fred;
fred is a placeholder pointing to a value in memory (an address in memory containing some information)

Pointers — the fun really starts
	
	Variables designed to store memory addresses (think references in Java)
	
	& is used to get the address of a variable
	
	* is used to declare a variable as a pointer type
		e.g., int *p, double *q, char *r …
	
	* is also used as the de-reference operator
		It accesses the value at the memory location stored in a pointer



2015-09-28 Mon
SotD: "Lump" — The Presidents of the United States of America
Aim: Ok, now we're really going to get to the point.

Do Now:
	1) Declare int, double, and char variables.
	2) Declare int, double, and char pointers.
	3) Initialize each pointer to the address of the corresponding variable.
	4) Print out the pointer's value for each (as an unsigned long).
	5) Add 1 to each pointer.
	6) Print out the pointers again.
	What happened?



2015-09-29 Tues
SotD: "In the Meantime" — Spacehog
Aim: Time to stop stringing you along.

float fray[5]; // f-array, or f-ray
float *fp = fray;

C strings (ctrings)
	
	Strings are character arrays that end with a null character (either '' or 0 f '\0').
	The terminating null character is a convention. String functions will not work correctly without it.
	The following are valid ways to declare strings:
		
		char s[256]
			Normal array declaration, allocates 256 bytes, nothing is set automatically
		
		char s[256] = "Imagine";
			Allocates 256 bytes, puts "Imagine" in the first 7 bytes and adds a null at the 8th byte
		
		char s[] = "Tuesday";
			Allocates 8 bytes, puts "Tuesday" in the first 7 bytes and adds a null at the 8th byte.
		
		char *s = "Mankind";
			Allocates 8 bytes, puts "Mankind" in the first 7 bytes and adds a null at the 8th byte. s is a pointer variable instead of an array.
	
	You can only assign strings with = at delcaration.
		char s[] = "zero";	//ok
		s = "seven";		// not ok



2015-09-30 Wed
SotD: "One Headlight" — The Wallflowers
Aim: How to write functioning code

Do Now: Write a C program that does the following:
	1) Creates a string and sets it to some value.
	2) Finds the length of the string and then prints it (code in main function)



2015-10-01 Thurs
SotD: "Tom Sawyer" — Rush
Aim: How to write functioning code

Functions: A brief interlude
	
	All C functions are "pass by value"
		A parameter is a copy of the variable passed into the function.
		The original variable is not touched.
	
	function headers
		<return type> <name> (<parameters>)
	
	You must declare a function before you use it.
	This can be done in a few ways:
		
		1) Write the entire function at the top of your code, making sure to keep the order correct.
		
		2) Write the function headers at the top of your code, and then provide the full definition later.
		
		3) Put all the function headers in a separate file (ending in .h). Then include that file in your .c file and provice the efinitions there.

Back to Ctrings
	
	string.h
		C library that includes useful string functions.
		
		All the functions assume that the parameter strings are always null-terminated.
		
		int strlen(char*s)
			Returns the number of characters from the start of s up to but not including the termianting null
		
		int strcmp(char *s1, char *s2)
			Returns 0 if s1 and s2 are indentical up to the terminating null.
			
			Returns a positive number of s1 is lexicographically greater than s2
		
		char * strcpy(char *dest, char *source)
			Copies all the chars up to and including the terminating null from source into dest
			
			Returns dest
		
		char * strcat(char *s1, char *s2)
			Appends all the characters up to and including the terminating null in s2 to the end of s1
			
			Returns s1
		
		Many string functions have a "strn" version, these take an extra parameter that sets a limit to the number of bytes you will look at in a string.
			
			strncat(char *s1, char *s2, int n)
				Appends at most n chars from s2 into s1.
				
				It will stop if it hits a terminating null in s2 before n bytes.



2015-10-02 Fri



2015-10-05 Mon
SotD: "Thunderstruck" — AC/DC



2015-10-06 Tues
SotD: "Fake Plastic Trees" — Radiohead
Aim: Make it so



2015-10-07 Wed
SotD: "Rearviewmirror" — Pearl Jam
Aim: Make it so

Separate compilation
	
	You can combine multiple C files into a C program by including them all in one gcc command.
		e.g.:
			gcc test.c string.c foo.c woohoo.c
	
	You cannot have duplicate function or global variable names across these files. This includes the main function.
	
	gcc -c
		Will compile a .c file into a .o file (compiled code file, not a fully functional program). Do this to compile a .c file that does not contain a main function.
	
	gcc can link .o files together with .c files.


2015-10-08 Thurs
SoTD: "Breaking the Girl" — Red Hot Chili Peppers
Aim: If you can't (al)locate your memory then … I forget

Dynamic memory allocation
	
	malloc(int x)
		Allocates x bytes of memory (from the heap)
		
		Returns the address at the beginning of the allocation
		
		Returns a void *, always typecast to the correct pointer type
	
	calloc(int n, int x)
		Allocates n * x bytes of memory
		
		Ensures that each bit is set to 0
		
		Works like malloc in all other ways
	
	realloc(void *p, int x)
		Changes the amount of memory allocated to a given block.
		
		p must be a pointer to the beginning of an allocated block of memory, but it does not have to be the original pointer
		
		If x is smaller than the original size of the alocation, the extra bytes will be released



2015-10-09 Fri
SotD: "Papa's Got a Brand New Bag" — James Brown
Aim: Always structure your code well.

Dynamic Memory Allocation
	
	Normal memory allocation happens on the stack.
	
	Stack memory gets released as functions pop off.
	
	Dynamic memory is located on the heap. It presists even after the function that created it pops off the stack.
	
	You must manually release dynamically allocated memory from the heap.
	
	void free(void *ptr)
		Releases dynamically allocated memory.
		
		Takes one parameter, a pointer to the beginning of a dynamically allocated block of memory.
		
		Every call to malloc/calloc should have a corresponding call to free.
		
		int *p;
		p = (int *)malloc(20);
		free(p);
	
typedef
	Provide a new name for an existing datatype.
	
	typedef <real type> <new name>;
	
	e.g.:
		typedef unsigned int size_t;
		size_t x = 139; // x is really an unsigned int

struct
	A collection of values in a single datatype
	
	struct {
		int a;
		char x;
	} s;



2015-10-12 Mon



2015-10-13 Tues
SoTD: "Low Rider" — War
Aim: Zelda's in trouble, get Link!

Do Now: What's wrong with this function?
		(Assume that node has been declared correctly)

node *insert_front(node *n, int i) {
	node new;
	
	new.i = i;
	new.next = n;
	
	return &new;
}



2015-10-14 Wed
2015-10-15 Thurs
2015-10-16 Fri

2015-10-19 Mon
2015-10-20 Tues
SoTD: "Wheels" ― Cake
Aim: File this under useful information.

Do Now: What are the different kinds of file permissions?

File permissions
	
	3 kinds of permissions
		read, write, execute
	



2015-10-21 Wed
2015-10-22 Thurs
2015-10-23 Fri

2015-10-26 Mon
2015-10-27 Tues
2015-10-28 Wed
2015-10-29 Thurs
2015-10-30 Fri


2015-11-02 Mon
2015-11-03 Tues
2015-11-04 Wed
2015-11-05 Thurs
2015-11-06 Fri

2015-11-09 Mon
2015-11-10 Tues
2015-11-11 Wed
2015-11-12 Thurs
2015-11-13 Fri

2015-11-16 Mon
2015-11-17 Tues
2015-11-18 Wed
2015-11-19 Thurs
2015-11-20 Fri

2015-11-23 Mon
2015-11-24 Tues
2015-11-25 Wed
2015-11-26 Thurs
2015-11-27 Fri

2015-11-30 Mon


2015-12-01 Tues
2015-12-02 Wed
2015-12-03 Thurs
2015-12-04 Fri

2015-12-07 Mon
2015-12-08 Tues
2015-12-09 Wed
2015-12-10 Thurs
2015-12-11 Fri

2015-12-14 Mon
2015-12-15 Tues
2015-12-16 Wed
2015-12-17 Thurs
2015-12-18 Fri

2015-12-21 Mon
2015-12-22 Tues
2015-12-23 Wed
2015-12-24 Thurs
2015-12-25 Fri

2015-12-28 Mon
2015-12-29 Tues
2015-12-30 Wed
2015-12-31 Thurs


2015-01-01 Fri

2015-01-04 Mon
2015-01-05 Tues
2015-01-06 Wed
2015-01-07 Thurs
2015-01-08 Fri

2015-01-11 Mon
2015-01-12 Tues
2015-01-13 Wed
2015-01-14 Thurs
2015-01-15 Fri

2015-01-18 Mon
2015-01-19 Tues
2015-01-20 Wed
2015-01-21 Thurs
2015-01-22 Fri

2015-01-25 Mon
2015-01-26 Tues
2015-01-27 Wed
2015-01-28 Thurs
2015-01-29 Fri


2015-02-01 Mon
2015-02-02 Tues
2015-02-03 Wed
2015-02-04 Thurs
2015-02-05 Fri

2015-02-08 Mon
2015-02-09 Tues
2015-02-10 Wed
2015-02-11 Thurs
2015-02-12 Fri

2015-02-15 Mon
2015-02-16 Tues
2015-02-17 Wed
2015-02-18 Thurs
2015-02-19 Fri

2015-02-22 Mon
2015-02-23 Tues
2015-02-24 Wed
2015-02-25 Thurs
2015-02-26 Fri

2015-02-29 Mon


2015-03-01 Tues
2015-03-02 Wed
2015-03-03 Thurs
2015-03-04 Fri

2015-03-07 Mon
2015-03-08 Tues
2015-03-09 Wed
2015-03-10 Thurs
2015-03-11 Fri

2015-03-14 Mon
2015-03-15 Tues
2015-03-16 Wed 
2015-03-17 Thurs
2015-03-18 Fri

2015-03-21 Mon
2015-03-22 Tues
2015-03-23 Wed
2015-03-24 Thurs
2015-03-25 Fri

2015-03-28 Mon
2015-03-29 Tues
2015-03-30 Wed
2015-03-31 Thurs


2015-04-01
